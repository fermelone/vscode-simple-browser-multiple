{
  "version": 3,
  "sources": ["../preview-src/events.ts", "../preview-src/index.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport function onceDocumentLoaded(f: () => void) {\n\tif (document.readyState === 'loading' || document.readyState as string === 'uninitialized') {\n\t\tdocument.addEventListener('DOMContentLoaded', f);\n\t} else {\n\t\tf();\n\t}\n}", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { onceDocumentLoaded } from './events';\n\nconst vscode = acquireVsCodeApi();\n\nfunction getSettings() {\n\tconst element = document.getElementById('simple-browser-settings');\n\tif (element) {\n\t\tconst data = element.getAttribute('data-settings');\n\t\tif (data) {\n\t\t\treturn JSON.parse(data);\n\t\t}\n\t}\n\n\tthrow new Error(`Could not load settings`);\n}\n\nconst settings = getSettings();\n\nconst iframe = document.querySelector('iframe')!;\nconst header = document.querySelector('.header')!;\nconst input = header.querySelector<HTMLInputElement>('.url-input')!;\nconst forwardButton = header.querySelector<HTMLButtonElement>('.forward-button')!;\nconst backButton = header.querySelector<HTMLButtonElement>('.back-button')!;\nconst reloadButton = header.querySelector<HTMLButtonElement>('.reload-button')!;\nconst openExternalButton = header.querySelector<HTMLButtonElement>('.open-external-button')!;\n\nwindow.addEventListener('message', e => {\n\tswitch (e.data.type) {\n\t\tcase 'focus':\n\t\t\t{\n\t\t\t\tiframe.focus();\n\t\t\t\tbreak;\n\t\t\t}\n\t\tcase 'didChangeFocusLockIndicatorEnabled':\n\t\t\t{\n\t\t\t\ttoggleFocusLockIndicatorEnabled(e.data.enabled);\n\t\t\t\tbreak;\n\t\t\t}\n\t}\n});\n\nonceDocumentLoaded(() => {\n\tsetInterval(() => {\n\t\tconst iframeFocused = document.activeElement?.tagName === 'IFRAME';\n\t\tdocument.body.classList.toggle('iframe-focused', iframeFocused);\n\t}, 50);\n\n\tiframe.addEventListener('load', () => {\n\t\t// Noop\n\t});\n\n\tinput.addEventListener('change', e => {\n\t\tconst url = (e.target as HTMLInputElement).value;\n\t\tnavigateTo(url);\n\t});\n\n\tforwardButton.addEventListener('click', () => {\n\t\thistory.forward();\n\t});\n\n\tbackButton.addEventListener('click', () => {\n\t\thistory.back();\n\t});\n\n\topenExternalButton.addEventListener('click', () => {\n\t\tvscode.postMessage({\n\t\t\ttype: 'openExternal',\n\t\t\turl: input.value\n\t\t});\n\t});\n\n\treloadButton.addEventListener('click', () => {\n\t\t// This does not seem to trigger what we want\n\t\t// history.go(0);\n\n\t\t// This incorrectly adds entries to the history but does reload\n\t\t// It also always incorrectly always loads the value in the input bar,\n\t\t// which may not match the current page if the user has navigated\n\t\tnavigateTo(input.value);\n\t});\n\n\tnavigateTo(settings.url);\n\tinput.value = settings.url;\n\n\ttoggleFocusLockIndicatorEnabled(settings.focusLockIndicatorEnabled);\n\n\tfunction navigateTo(rawUrl: string): void {\n\t\ttry {\n\t\t\tconst url = new URL(rawUrl);\n\n\t\t\t// Try to bust the cache for the iframe\n\t\t\t// There does not appear to be any way to reliably do this except modifying the url\n\t\t\tconst existing = new URLSearchParams(location.search);\n\t\t\turl.searchParams.append('id', existing.get('id')!);\n\t\t\turl.searchParams.append('vscodeBrowserReqId', Date.now().toString());\n\n\t\t\tiframe.src = url.toString();\n\t\t} catch {\n\t\t\tiframe.src = rawUrl;\n\t\t}\n\n\t\tvscode.setState({ url: rawUrl });\n\t}\n});\n\nfunction toggleFocusLockIndicatorEnabled(enabled: boolean) {\n\tdocument.body.classList.toggle('enable-focus-lock-indicator', enabled);\n}\n\n"],
  "mappings": "AAKO,SAASA,EAAmBC,EAAe,CAC7C,SAAS,aAAe,WAAa,SAAS,aAAyB,gBAC1E,SAAS,iBAAiB,mBAAoBA,CAAC,EAE/CA,EAAE,CAEJ,CCJA,IAAMC,EAAS,iBAAiB,EAEhC,SAASC,GAAc,CACtB,IAAMC,EAAU,SAAS,eAAe,yBAAyB,EACjE,GAAIA,EAAS,CACZ,IAAMC,EAAOD,EAAQ,aAAa,eAAe,EACjD,GAAIC,EACH,OAAO,KAAK,MAAMA,CAAI,CAExB,CAEA,MAAM,IAAI,MAAM,yBAAyB,CAC1C,CAEA,IAAMC,EAAWH,EAAY,EAEvBI,EAAS,SAAS,cAAc,QAAQ,EACxCC,EAAS,SAAS,cAAc,SAAS,EACzCC,EAAQD,EAAO,cAAgC,YAAY,EAC3DE,EAAgBF,EAAO,cAAiC,iBAAiB,EACzEG,EAAaH,EAAO,cAAiC,cAAc,EACnEI,EAAeJ,EAAO,cAAiC,gBAAgB,EACvEK,EAAqBL,EAAO,cAAiC,uBAAuB,EAE1F,OAAO,iBAAiB,UAAW,GAAK,CACvC,OAAQ,EAAE,KAAK,KAAM,CACpB,IAAK,QACJ,CACCD,EAAO,MAAM,EACb,KACD,CACD,IAAK,qCACJ,CACCO,EAAgC,EAAE,KAAK,OAAO,EAC9C,KACD,CACF,CACD,CAAC,EAEDC,EAAmB,IAAM,CACxB,YAAY,IAAM,CACjB,IAAMC,EAAgB,SAAS,eAAe,UAAY,SAC1D,SAAS,KAAK,UAAU,OAAO,iBAAkBA,CAAa,CAC/D,EAAG,EAAE,EAELT,EAAO,iBAAiB,OAAQ,IAAM,CAEtC,CAAC,EAEDE,EAAM,iBAAiB,SAAUQ,GAAK,CACrC,IAAMC,EAAOD,EAAE,OAA4B,MAC3CE,EAAWD,CAAG,CACf,CAAC,EAEDR,EAAc,iBAAiB,QAAS,IAAM,CAC7C,QAAQ,QAAQ,CACjB,CAAC,EAEDC,EAAW,iBAAiB,QAAS,IAAM,CAC1C,QAAQ,KAAK,CACd,CAAC,EAEDE,EAAmB,iBAAiB,QAAS,IAAM,CAClDX,EAAO,YAAY,CAClB,KAAM,eACN,IAAKO,EAAM,KACZ,CAAC,CACF,CAAC,EAEDG,EAAa,iBAAiB,QAAS,IAAM,CAO5CO,EAAWV,EAAM,KAAK,CACvB,CAAC,EAEDU,EAAWb,EAAS,GAAG,EACvBG,EAAM,MAAQH,EAAS,IAEvBQ,EAAgCR,EAAS,yBAAyB,EAElE,SAASa,EAAWC,EAAsB,CACzC,GAAI,CACH,IAAMF,EAAM,IAAI,IAAIE,CAAM,EAIpBC,EAAW,IAAI,gBAAgB,SAAS,MAAM,EACpDH,EAAI,aAAa,OAAO,KAAMG,EAAS,IAAI,IAAI,CAAE,EACjDH,EAAI,aAAa,OAAO,qBAAsB,KAAK,IAAI,EAAE,SAAS,CAAC,EAEnEX,EAAO,IAAMW,EAAI,SAAS,CAC3B,MAAQ,CACPX,EAAO,IAAMa,CACd,CAEAlB,EAAO,SAAS,CAAE,IAAKkB,CAAO,CAAC,CAChC,CACD,CAAC,EAED,SAASN,EAAgCQ,EAAkB,CAC1D,SAAS,KAAK,UAAU,OAAO,8BAA+BA,CAAO,CACtE",
  "names": ["onceDocumentLoaded", "f", "vscode", "getSettings", "element", "data", "settings", "iframe", "header", "input", "forwardButton", "backButton", "reloadButton", "openExternalButton", "toggleFocusLockIndicatorEnabled", "onceDocumentLoaded", "iframeFocused", "e", "url", "navigateTo", "rawUrl", "existing", "enabled"]
}
